# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.1.0
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info  # pyright: reportUnusedImport=false

from typing import Any, Callable, TYPE_CHECKING
from typing_extensions import Self

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _example
else:
    import _example

if TYPE_CHECKING:
    import builtins as __builtin__
else:
    try:
        import builtins as __builtin__
    except ImportError:
        import __builtin__


class SwigPyObject:
    def disown(self: Self) -> None:
        ...

    def acquire(self: Self) -> None:
        ...

    def own(self: Self, v: "SwigPyObject | None" = None) -> bool:
        ...


class SwigPyObjectHolder:
    this: SwigPyObject

    def __repr__(self: Self) -> str:
        ...


def _swig_repr(self: SwigPyObjectHolder) -> str:  # pyright: reportUnusedFunction=false
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (
        self.__class__.__module__,
        self.__class__.__name__,
        strthis,
    )


def _swig_setattr_nondynamic_instance_variable(
    set: Callable[[SwigPyObjectHolder, str, Any], None]
) -> Callable[
    [SwigPyObjectHolder, str, Any], None
]:  # pyright: reportUnusedFunction=false
    def set_instance_attr(self: SwigPyObjectHolder, name: str, value: Any):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)

    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(
    set: Callable[[type, str, Any], None]
) -> Callable[[type, str, Any], None]:  # pyright: reportUnusedFunction=false
    def set_class_attr(cls: type, name: str, value: Any):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)

    return set_class_attr


def _swig_add_metaclass(metaclass: type):  # pyright: reportUnusedFunction=false
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""

    def wrapper(cls: type):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())

    return wrapper


class _SwigNonDynamicMeta(type):  # pyright: reportUnusedClass=false
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""

    __setattr__: Callable[
        [type, str, Any], None
    ] = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class Shape(SwigPyObjectHolder):
    thisown = property(
        lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag"
    )

    def __init__(self):
        raise AttributeError("No constructor defined - class is abstract")

    __repr__ = _swig_repr
    __swig_destroy__ = _example.delete_Shape
    x = property(_example.Shape_x_get, _example.Shape_x_set)
    y = property(_example.Shape_y_get, _example.Shape_y_set)

    def move(self: Self, dx: float, dy: float):
        return _example.Shape_move(self, dx, dy)

    def area(self: Self):
        return _example.Shape_area(self)

    def perimeter(self: Self):
        return _example.Shape_perimeter(self)

    nshapes = property(_example.Shape_nshapes_get, _example.Shape_nshapes_set)


# Register Shape in _example:
_example.Shape_swigregister(Shape)
cvar = _example.cvar


class Circle(Shape):
    thisown = property(
        lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag"
    )
    __repr__ = _swig_repr

    def __init__(self: Self, r: float):
        _example.Circle_swiginit(self, _example.new_Circle(r))

    def area(self: Self):
        return _example.Circle_area(self)

    def perimeter(self: Self):
        return _example.Circle_perimeter(self)

    __swig_destroy__ = _example.delete_Circle


# Register Circle in _example:
_example.Circle_swigregister(Circle)


class Square(Shape):
    thisown = property(
        lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag"
    )
    __repr__ = _swig_repr

    def __init__(self: Self, w: float):
        _example.Square_swiginit(self, _example.new_Square(w))

    def area(self: Self):
        return _example.Square_area(self)

    def perimeter(self: Self):
        return _example.Square_perimeter(self)

    __swig_destroy__ = _example.delete_Square


# Register Square in _example:
_example.Square_swigregister(Square)
