from typing import Any, Iterator, Mapping, Type, TypeVar, overload

from example import DoubleMap, SwigPyIterator, SwigPyObject, pymap

T = TypeVar("T")

################################################################################
#
# SwigPyIterator
#
################################################################################

def SwigPyIterator_swigregister(self: Type[SwigPyIterator[Any]]) -> None: ...
def delete_SwigPyIterator(self: SwigPyIterator[Any]) -> None: ...

def SwigPyIterator_value(self: SwigPyIterator[T]) -> T: ...
def SwigPyIterator_incr(self: SwigPyIterator[T], n: int = ...) -> SwigPyIterator[T]: ...
def SwigPyIterator_decr(self: SwigPyIterator[T], n: int = ...) -> SwigPyIterator[T]: ...
def SwigPyIterator_distance(self: SwigPyIterator[T], x: SwigPyIterator[T]) -> int: ...
def SwigPyIterator_equal(self: SwigPyIterator[T], x: SwigPyIterator[T]) -> bool: ...
def SwigPyIterator_copy(self: SwigPyIterator[T]) -> SwigPyIterator[T]: ...
def SwigPyIterator_next(self: SwigPyIterator[T]) -> T: ...
def SwigPyIterator___next__(self: SwigPyIterator[T]) -> T: ...
def SwigPyIterator_previous(self: SwigPyIterator[T]) -> T: ...
def SwigPyIterator_advance(self: SwigPyIterator[T], n: int) -> SwigPyIterator[T]: ...
def SwigPyIterator___eq__(self: SwigPyIterator[T], x: SwigPyIterator[T]) -> bool: ...
def SwigPyIterator___ne__(self: SwigPyIterator[T], x: SwigPyIterator[T]) -> bool: ...
def SwigPyIterator___iadd__(self: SwigPyIterator[T], n: int) -> SwigPyIterator[T]: ...
def SwigPyIterator___isub__(self: SwigPyIterator[T], n: int) -> SwigPyIterator[T]: ...
def SwigPyIterator___add__(self: SwigPyIterator[T], n: int) -> SwigPyIterator[T]: ...

@overload
def SwigPyIterator___sub__(self: SwigPyIterator[T], x: SwigPyIterator[T], /) -> SwigPyIterator[T]: ...
@overload
def SwigPyIterator___sub__(self: SwigPyIterator[T], n: int, x: SwigPyIterator[T], /) -> SwigPyIterator[T]: ...
# SwigPyIterator end

################################################################################
#
# DoubleMap
#
################################################################################

def DoubleMap_swigregister(self: Type[DoubleMap]) -> None: ...
def DoubleMap_swiginit(self: DoubleMap, allocator: SwigPyObject) -> None: ...
def delete_DoubleMap(self: DoubleMap) -> None: ...

@overload
def new_DoubleMap(self: DoubleMap) -> SwigPyObject: ...
# @overload
# def new_DoubleMap(self: DoubleMap, comparator: ?, /) -> SwigPyObject: ...
@overload
def new_DoubleMap(self: DoubleMap, map: Mapping[str, float], /) -> SwigPyObject: ...

def DoubleMap_iterator(self: DoubleMap) -> SwigPyIterator[str]: ...
def DoubleMap___nonzero__(self: DoubleMap) -> bool: ...
def DoubleMap___bool__(self: DoubleMap) -> bool: ...
def DoubleMap___len__(self: DoubleMap) -> int: ...
def DoubleMap___getitem__(self: DoubleMap, key: str) -> float: ...
def DoubleMap___delitem__(self: DoubleMap, key: str) -> None: ...
def DoubleMap_has_key(self: DoubleMap, key: str) -> bool: ...
def DoubleMap_keys(self: DoubleMap) -> list[str]: ...
def DoubleMap_values(self: DoubleMap) -> list[float]: ...
def DoubleMap_items(self: DoubleMap) -> list[tuple[str, float]]: ...
def DoubleMap___contains__(self: DoubleMap, key: str) -> bool: ...
def DoubleMap_key_iterator(self: DoubleMap) -> SwigPyIterator[str]: ...
def DoubleMap_value_iterator(self: DoubleMap) -> SwigPyIterator[float]: ...

@overload
def DoubleMap___setitem__(self: DoubleMap, key: str) -> None: ...
@overload
def DoubleMap___setitem__(self: DoubleMap, key: str, value: float) -> None: ...

def DoubleMap_asdict(self: DoubleMap) -> dict[str, float]: ...
def DoubleMap_empty(self: DoubleMap) -> bool: ...
def DoubleMap_size(self: DoubleMap) -> int: ...
def DoubleMap_swap(self: DoubleMap, x: DoubleMap) -> None: ...
def DoubleMap_begin(self: DoubleMap) -> SwigPyIterator[tuple[str, float]]: ...
def DoubleMap_end(self: DoubleMap) -> SwigPyIterator[tuple[str, float]]: ...
def DoubleMap_rbegin(self: DoubleMap) -> SwigPyIterator[tuple[str, float]]: ...
def DoubleMap_rend(self: DoubleMap) -> SwigPyIterator[tuple[str, float]]: ...
def DoubleMap_clear(self: DoubleMap) -> None: ...
def DoubleMap_get_allocator(self: DoubleMap) -> SwigPyObject: ...
def DoubleMap_count(self: DoubleMap, key: str) -> int: ...

@overload
def DoubleMap_erase(self: DoubleMap, key: str, /) -> int: ...
@overload
def DoubleMap_erase(self: DoubleMap, pos: SwigPyIterator[tuple[str, float]], /) -> None: ...
@overload
def DoubleMap_erase(self: DoubleMap, first: SwigPyIterator[tuple[str, float]], last: SwigPyIterator[tuple[str, float]], /) -> None: ...

def DoubleMap_find(self: DoubleMap, x: str) -> SwigPyIterator[tuple[str, float]]: ...
def DoubleMap_lower_bound(self: DoubleMap, x: str) -> SwigPyIterator[tuple[str, float]]: ...
def DoubleMap_upper_bound(self: DoubleMap, x: str) -> SwigPyIterator[tuple[str, float]]: ...
# DoubleMap end

################################################################################
#
# pymap
#
################################################################################

def pymap_swigregister(self: Type[pymap]) -> None: ...
def pymap_swiginit(self: pymap, allocator: SwigPyObject) -> None: ...
def delete_pymap(self: pymap) -> None: ...

@overload
def new_pymap(self: pymap) -> SwigPyObject: ...
# @overload
# def new_pymap(self: pymap, comparator: ?, /) -> SwigPyObject: ...
@overload
def new_pymap(self: pymap, map: Mapping[Any, Any], /) -> SwigPyObject: ...

def pymap_iterator(self: pymap) -> SwigPyIterator[Any]: ...
def pymap___nonzero__(self: pymap) -> bool: ...
def pymap___bool__(self: pymap) -> bool: ...
def pymap___len__(self: pymap) -> int: ...
def pymap___getitem__(self: pymap, key: Any) -> Any: ...
def pymap___delitem__(self: pymap, key: Any) -> None: ...
def pymap_has_key(self: pymap, key: Any) -> bool: ...
def pymap_keys(self: pymap) -> list[Any]: ...
def pymap_values(self: pymap) -> list[Any]: ...
def pymap_items(self: pymap) -> list[tuple[Any, Any]]: ...
def pymap___contains__(self: pymap, key: Any) -> bool: ...
def pymap_key_iterator(self: pymap) -> SwigPyIterator[Any]: ...
def pymap_value_iterator(self: pymap) -> SwigPyIterator[Any]: ...

@overload
def pymap___setitem__(self: pymap, key: Any) -> None: ...
@overload
def pymap___setitem__(self: pymap, key: Any, value: Any) -> None: ...

def pymap_asdict(self: pymap) -> dict[Any, Any]: ...
def pymap_empty(self: pymap) -> bool: ...
def pymap_size(self: pymap) -> int: ...
def pymap_swap(self: pymap, x: pymap) -> None: ...
def pymap_begin(self: pymap) -> SwigPyIterator[tuple[Any, Any]]: ...
def pymap_end(self: pymap) -> SwigPyIterator[tuple[Any, Any]]: ...
def pymap_rbegin(self: pymap) -> SwigPyIterator[tuple[Any, Any]]: ...
def pymap_rend(self: pymap) -> SwigPyIterator[tuple[Any, Any]]: ...
def pymap_clear(self: pymap) -> None: ...
def pymap_get_allocator(self: pymap) -> SwigPyObject: ...
def pymap_count(self: pymap, key: Any) -> int: ...

@overload
def pymap_erase(self: pymap, key: Any, /) -> int: ...
@overload
def pymap_erase(self: pymap, pos: SwigPyIterator[tuple[Any, Any]], /) -> None: ...
@overload
def pymap_erase(self: pymap, first: SwigPyIterator[tuple[Any, Any]], last: SwigPyIterator[tuple[Any, Any]], /) -> None: ...

def pymap_find(self: pymap, x: Any) -> SwigPyIterator[tuple[Any, Any]]: ...
def pymap_lower_bound(self: pymap, x: Any) -> SwigPyIterator[tuple[Any, Any]]: ...
def pymap_upper_bound(self: pymap, x: Any) -> SwigPyIterator[tuple[Any, Any]]: ...
# pymap end

def halfd(v: Mapping[str, float]) -> DoubleMap: ...
def halfi(v: Mapping[str, int]) -> Mapping[str, int]: ...
