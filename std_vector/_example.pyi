from typing import Any, Sequence, Type, TypeVar, overload

from example import DoubleVector, IntVector, SwigPyIterator, SwigPyObject

T = TypeVar("T")

def average(v: IntVector | Sequence[int]) -> float: ...
def half(v: DoubleVector | Sequence[float]) -> DoubleVector: ...
def halve_in_place(v: DoubleVector | Sequence[float]) -> None: ...

################################################################################
#
# SwigPyIterator
#
################################################################################

def SwigPyIterator_swigregister(self: Type[SwigPyIterator[Any]]) -> None: ...
def delete_SwigPyIterator(self: SwigPyIterator[Any]) -> None: ...

def SwigPyIterator_value(self: SwigPyIterator[T]) -> T: ...
def SwigPyIterator_incr(self: SwigPyIterator[T], n: int = ...) -> SwigPyIterator[T]: ...
def SwigPyIterator_decr(self: SwigPyIterator[T], n: int = ...) -> SwigPyIterator[T]: ...
def SwigPyIterator_distance(self: SwigPyIterator[T], x: SwigPyIterator[T]) -> int: ...
def SwigPyIterator_equal(self: SwigPyIterator[T], x: SwigPyIterator[T]) -> bool: ...
def SwigPyIterator_copy(self: SwigPyIterator[T]) -> SwigPyIterator[T]: ...
def SwigPyIterator_next(self: SwigPyIterator[T]) -> T: ...
def SwigPyIterator___next__(self: SwigPyIterator[T]) -> T: ...
def SwigPyIterator_previous(self: SwigPyIterator[T]) -> T: ...
def SwigPyIterator_advance(self: SwigPyIterator[T], n: int) -> SwigPyIterator[T]: ...
def SwigPyIterator___eq__(self: SwigPyIterator[T], x: SwigPyIterator[T]) -> bool: ...
def SwigPyIterator___ne__(self: SwigPyIterator[T], x: SwigPyIterator[T]) -> bool: ...
def SwigPyIterator___iadd__(self: SwigPyIterator[T], n: int) -> SwigPyIterator[T]: ...
def SwigPyIterator___isub__(self: SwigPyIterator[T], n: int) -> SwigPyIterator[T]: ...
def SwigPyIterator___add__(self: SwigPyIterator[T], n: int) -> SwigPyIterator[T]: ...

@overload
def SwigPyIterator___sub__(self: SwigPyIterator[T], x: SwigPyIterator[T], /) -> SwigPyIterator[T]: ...
@overload
def SwigPyIterator___sub__(self: SwigPyIterator[T], n: int, x: SwigPyIterator[T], /) -> SwigPyIterator[T]: ...
# SwigPyIterator end

################################################################################
#
# IntVector
#
################################################################################
def IntVector_swigregister(self: Type[IntVector]) -> None: ...
def IntVector_swiginit(self: IntVector, allocator: SwigPyObject) -> None: ...
def delete_IntVector(self: IntVector) -> None: ...

@overload
def new_IntVector(self: IntVector) -> SwigPyObject: ...
@overload
def new_IntVector(self: IntVector, seq: Sequence[int], /) -> SwigPyObject: ...
@overload
def new_IntVector(self: IntVector, size: int, /) -> SwigPyObject: ...
@overload
def new_IntVector(self: IntVector, size: int, value: int, /) -> SwigPyObject: ...

def IntVector_iterator(self: IntVector) -> SwigPyIterator[int]: ...
def IntVector___nonzero__(self: IntVector) -> bool: ...
def IntVector___bool__(self: IntVector) -> bool: ...
def IntVector___len__(self: IntVector) -> int: ...
def IntVector___getslice__(self: IntVector, i: int, j: int) -> IntVector: ...

@overload
def IntVector___setslice__(self: IntVector, i: int, j: int, /) -> None: ...
@overload
def IntVector___setslice__(self: IntVector, i: int, j: int, seq: Sequence[int], /) -> None: ...

def IntVector___delslice__(self: IntVector, i: int, j: int) -> None: ...

@overload
def IntVector___delitem__(self: IntVector, i: int, j: int, /) -> None: ...
@overload
def IntVector___delitem__(self: IntVector, slice: slice, /) -> None: ...

@overload
def IntVector___getitem__(self: IntVector, i: int, /) -> int: ...
@overload
def IntVector___getitem__(self: IntVector, slice: slice, /) -> IntVector: ...

@overload
def IntVector___setitem__(self: IntVector, slice: slice, /) -> None: ...
@overload
def IntVector___setitem__(self: IntVector, slice: slice, seq: Sequence[int], /) -> None: ...
@overload
def IntVector___setitem__(self: IntVector, i: int, v: int, /) -> None: ...

def IntVector_pop(self: IntVector) -> int: ...
def IntVector_append(self: IntVector, x: int) -> None: ...
def IntVector_empty(self: IntVector) -> bool: ...
def IntVector_size(self: IntVector) -> int: ...
def IntVector_swap(self: IntVector, v: IntVector) -> None: ...
def IntVector_begin(self: IntVector) -> SwigPyIterator[int]: ...
def IntVector_end(self: IntVector) -> SwigPyIterator[int]: ...
def IntVector_rbegin(self: IntVector) -> SwigPyIterator[int]: ...
def IntVector_rend(self: IntVector) -> SwigPyIterator[int]: ...
def IntVector_clear(self: IntVector) -> None: ...
def IntVector_get_allocator(self: IntVector) -> SwigPyObject: ...
def IntVector_pop_back(self: IntVector) -> None: ...

@overload
def IntVector_erase(self: IntVector, pos: SwigPyIterator[int], /) -> SwigPyIterator[int]: ...
@overload
def IntVector_erase(self: IntVector, first: SwigPyIterator[int], last: SwigPyIterator[int], /) -> SwigPyIterator[int]: ...

def IntVector_push_back(self: IntVector, x: int) -> None: ...
def IntVector_front(self: IntVector) -> int: ...
def IntVector_back(self: IntVector) -> int: ...
def IntVector_assign(self: IntVector, n: int, x: int) -> None: ...

@overload
def IntVector_resize(self: IntVector, size: int, /) -> None: ...
@overload
def IntVector_resize(self: IntVector, size: int, value: int, /) -> None: ...

@overload
def IntVector_insert(self: IntVector, pos: SwigPyIterator[int], value: int, /) -> SwigPyIterator[int]: ...
@overload
def IntVector_insert(self: IntVector, pos: SwigPyIterator[int], count: int, value: int, /) -> None: ...

def IntVector_reserve(self: IntVector, n: int) -> None: ...
def IntVector_capacity(self: IntVector) -> int: ...
# IntVector end

################################################################################
#
# DoubleVector
#
################################################################################
def DoubleVector_swigregister(self: Type[DoubleVector]) -> None: ...
def DoubleVector_swiginit(self: DoubleVector, allocator: SwigPyObject) -> None: ...
def delete_DoubleVector(self: DoubleVector) -> None: ...

@overload
def new_DoubleVector(self: DoubleVector) -> SwigPyObject: ...
@overload
def new_DoubleVector(self: DoubleVector, seq: Sequence[float], /) -> SwigPyObject: ...
@overload
def new_DoubleVector(self: DoubleVector, size: int, /) -> SwigPyObject: ...
@overload
def new_DoubleVector(self: DoubleVector, size: int, value: float, /) -> SwigPyObject: ...

def DoubleVector_iterator(self: DoubleVector) -> SwigPyIterator[float]: ...
def DoubleVector___nonzero__(self: DoubleVector) -> bool: ...
def DoubleVector___bool__(self: DoubleVector) -> bool: ...
def DoubleVector___len__(self: DoubleVector) -> int: ...
def DoubleVector___getslice__(self: DoubleVector, i: int, j: int) -> DoubleVector: ...

@overload
def DoubleVector___setslice__(self: DoubleVector, i: int, j: int, /) -> None: ...
@overload
def DoubleVector___setslice__(self: DoubleVector, i: int, j: int, seq: Sequence[float], /) -> None: ...

def DoubleVector___delslice__(self: DoubleVector, i: int, j: int) -> None: ...

@overload
def DoubleVector___delitem__(self: DoubleVector, i: int, j: int, /) -> None: ...
@overload
def DoubleVector___delitem__(self: DoubleVector, slice: slice, /) -> None: ...

@overload
def DoubleVector___getitem__(self: DoubleVector, i: int, /) -> float: ...
@overload
def DoubleVector___getitem__(self: DoubleVector, slice: slice, /) -> DoubleVector: ...

@overload
def DoubleVector___setitem__(self: DoubleVector, slice: slice, /) -> None: ...
@overload
def DoubleVector___setitem__(self: DoubleVector, slice: slice, seq: Sequence[float], /) -> None: ...
@overload
def DoubleVector___setitem__(self: DoubleVector, i: int, v: float, /) -> None: ...

def DoubleVector_pop(self: DoubleVector) -> float: ...
def DoubleVector_append(self: DoubleVector, x: float) -> None: ...
def DoubleVector_empty(self: DoubleVector) -> bool: ...
def DoubleVector_size(self: DoubleVector) -> int: ...
def DoubleVector_swap(self: DoubleVector, v: DoubleVector) -> None: ...
def DoubleVector_begin(self: DoubleVector) -> SwigPyIterator[float]: ...
def DoubleVector_end(self: DoubleVector) -> SwigPyIterator[float]: ...
def DoubleVector_rbegin(self: DoubleVector) -> SwigPyIterator[float]: ...
def DoubleVector_rend(self: DoubleVector) -> SwigPyIterator[float]: ...
def DoubleVector_clear(self: DoubleVector) -> None: ...
def DoubleVector_get_allocator(self: DoubleVector) -> SwigPyObject: ...
def DoubleVector_pop_back(self: DoubleVector) -> None: ...

@overload
def DoubleVector_erase(self: DoubleVector, pos: SwigPyIterator[float], /) -> SwigPyIterator[float]: ...
@overload
def DoubleVector_erase(self: DoubleVector, first: SwigPyIterator[float], last: SwigPyIterator[float], /) -> SwigPyIterator[float]: ...

def DoubleVector_push_back(self: DoubleVector, x: float) -> None: ...
def DoubleVector_front(self: DoubleVector) -> float: ...
def DoubleVector_back(self: DoubleVector) -> float: ...
def DoubleVector_assign(self: DoubleVector, n: int, x: float) -> None: ...

@overload
def DoubleVector_resize(self: DoubleVector, size: int, /) -> None: ...
@overload
def DoubleVector_resize(self: DoubleVector, size: int, value: float, /) -> None: ...

@overload
def DoubleVector_insert(self: DoubleVector, pos: SwigPyIterator[float], value: float, /) -> SwigPyIterator[float]: ...
@overload
def DoubleVector_insert(self: DoubleVector, pos: SwigPyIterator[float], count: int, value: float, /) -> None: ...

def DoubleVector_reserve(self: DoubleVector, n: int) -> None: ...
def DoubleVector_capacity(self: DoubleVector) -> int: ...
# DoubleVector end
